量的声明和使用

1.var声明的变量会挂载在window上，而let和const声明的变量不会；
2.let和const声明形成块作用域
3.var声明变量存在变量提升，let和const不存在变量提升
4.同一作用域下let和const不能声明同名变量，而var可以
5.const声明一只读的常量，声明后值不能进行改变

数据类型

1.JS中有七种数据类型，包括：
2.五种基本数据类型（Number,String,Boolean,Undefined,Null）,
3.一种复杂数据类型（Object），
4.ES6引入了一种新的原始数据类型（Symbol）。

数字包括整数(整型数字)、小数(浮点型数字)
整数又可以通过二进制或八进制或十六进制表示，但所有数学运算返回的都是十进制结果。

Symbol类型
1.Symbol是ES6引入的一种新的原始数据类型，它表示独一无二的值。
2.symbol 函数前不能使用new命令，因为它不是对象，不能添加属性。
3.Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，易于区分
4.当Symbol的参数是一个对象时，就会调用该对象的toString方法，将其转换为字符串，然后再生成一个Symbol值
5.ES2019提供了一个实例属性description，可以直接返回Symbol的描述

6.symbol函数的参数只是表示对当前Symbol值的描述，因此相同参数的symbol函数的返回值是不相等的
7.symbol值不能与其他类型的值进行运算
8.利用Symbol的独一无二性，可以把Symbol 值用于对象的属性名，就能保证不会出现同名的属性
9.Symbol 值作为对象属性名时，不能用点运算符。
10.在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在中括号之中。





   JavaScript中有7种数据类型：数字（number）、字符串（string）、布尔值（boolean）、undefined、null、对象（Object）、Symbol。 其中对象类型包括：数组（Array）、函数（Function）

数据类型之间的转换

 其它数据转换为数字
        Number();
        a.如果转换的内容可以转成数字，那么就直接返回这个内容对应的数字。
        b.如果不可以转换那么返回NaN.
        c.如果在内容中出现小数，那么小数会保留。 
        d.如果内容为空，那么转换成0;
        

 其它数据转换为数字
        PareInt();
        a.如果转换的内容可以转成数字，那么就直接返回这个内容对应的数字。 
        b.如果不可以转换那么返回NaN. 
        c.如果带有小数，那么会去掉小数，而不是四舍五入。 
        d.如果第一个字符是数字，则继续解析直至字符串解析完毕或者遇到一个非数字 符号为止.
        ParseFloat();
       与parseInt一样，唯一区别是parseFloat可以保留小数

其它数据转换为字符串
       toString() : 
        除了null undefined这两个类型不能调用 .toString() ，其他任何数据都可以调用 
       String() : 
       任何数据都可以调用此函数
       隐式转换：
      当两个操作数做”+”运算时，如果表达式中任意一边有字符串，”+”，为字符串连接符
       var n = 200; 
       n = n + ""; 
       console.log(n, typeof n);    // “200”  string

其它数据转换为布尔值
      其它数据类型转换为boolean类型值为false,只有这几种情况:
       0、NaN、“”、null、undefined、false
       其它情况均为true
       隐式转换：
       在数据类型之前加“!!”即可
       var n = -200; 
       var b = !!n; 
       console.log(b, typeof b);    //  true  boolean